// This is your Prisma schema file for LOCAL DEVELOPMENT with SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id          String   @id @default(uuid())
  email       String?  @unique
  phone       String?  @unique
  name        String
  password    String
  avatar      String?
  firstName   String
  lastName    String
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostedMeetings     Meeting[]     @relation("MeetingHost")
  participations     Participant[]
  sentInvitations    MeetingInvitation[] @relation("InvitationSender")
  receivedInvitations MeetingInvitation[] @relation("InvitationReceiver")

  @@map("users")
}

// Meeting Model
model Meeting {
  id          String   @id @default(uuid())
  title       String
  description String?
  hostId      String
  roomCode    String   @unique
  status      MeetingStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  aiNotesEnabled Boolean @default(false)
  maxParticipants Int @default(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  host         User           @relation("MeetingHost", fields: [hostId], references: [id], onDelete: Cascade)
  participants Participant[]
  transcripts  Transcript[]
  notes        MeetingNotes?
  invitations  MeetingInvitation[]

  @@map("meetings")
}

enum MeetingStatus {
  SCHEDULED
  ACTIVE
  ENDED
  CANCELLED
}

// Participant Model
model Participant {
  id        String   @id @default(uuid())
  meetingId String
  userId    String?
  name      String
  email     String?
  phone     String?
  role      ParticipantRole @default(PARTICIPANT)
  joinedAt  DateTime?
  leftAt    DateTime?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("participants")
}

enum ParticipantRole {
  HOST
  MODERATOR
  PARTICIPANT
  OBSERVER
}

// Transcript Model
model Transcript {
  id            String   @id @default(uuid())
  meetingId     String
  participantId String?
  speakerName   String
  content       String
  timestamp     DateTime
  confidence    Float    @default(0.0)
  language      String   @default("en")
  createdAt     DateTime @default(now())

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

// Meeting Notes Model
model MeetingNotes {
  id        String   @id @default(uuid())
  meetingId String   @unique
  summary   String
  keyPoints String[] // JSON array of key points
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting       Meeting         @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  themes        Theme[]
  importantNotes ImportantNote[]
  decisions     Decision[]
  actionItems   ActionItem[]

  @@map("meeting_notes")
}

// Theme Model
model Theme {
  id               String   @id @default(uuid())
  meetingNotesId   String
  title            String
  description      String
  relevantTranscripts String[] // JSON array of transcript IDs
  createdAt        DateTime @default(now())

  // Relations
  meetingNotes MeetingNotes @relation(fields: [meetingNotesId], references: [id], onDelete: Cascade)

  @@map("themes")
}

// Important Note Model
model ImportantNote {
  id             String   @id @default(uuid())
  meetingNotesId String
  content        String
  timestamp      DateTime
  priority       Priority @default(MEDIUM)
  createdAt      DateTime @default(now())

  // Relations
  meetingNotes MeetingNotes @relation(fields: [meetingNotesId], references: [id], onDelete: Cascade)

  @@map("important_notes")
}

// Decision Model
model Decision {
  id             String        @id @default(uuid())
  meetingNotesId String
  title          String
  description    String
  decidedBy      String
  timestamp      DateTime
  status         DecisionStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  meetingNotes MeetingNotes @relation(fields: [meetingNotesId], references: [id], onDelete: Cascade)

  @@map("decisions")
}

// Action Item Model
model ActionItem {
  id               String           @id @default(uuid())
  meetingNotesId   String
  title            String
  description      String
  assignedTo       String?
  assignedToEmail  String?
  assignedToPhone  String?
  dueDate          DateTime?
  status           ActionItemStatus @default(PENDING)
  priority         Priority         @default(MEDIUM)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  meetingNotes MeetingNotes @relation(fields: [meetingNotesId], references: [id], onDelete: Cascade)

  @@map("action_items")
}

// Meeting Invitation Model
model MeetingInvitation {
  id           String           @id @default(uuid())
  meetingId    String
  invitedBy    String
  invitedEmail String?
  invitedPhone String?
  invitedName  String?
  status       InvitationStatus @default(PENDING)
  sentAt       DateTime         @default(now())
  respondedAt  DateTime?
  token        String           @unique
  expiresAt    DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  sender    User    @relation("InvitationSender", fields: [invitedBy], references: [id], onDelete: Cascade)
  receiver  User?   @relation("InvitationReceiver", fields: [invitedEmail], references: [email])

  @@map("meeting_invitations")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DecisionStatus {
  PENDING
  APPROVED
  REJECTED
  DEFERRED
}

enum ActionItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
